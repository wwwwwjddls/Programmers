https://programmers.co.kr/learn/courses/30/lessons/64061

[풀이]
1. board에서 0을 제외하고 행과 열을 변경하여 새 배열 b를 만든다.
2. moves의 요소를 하나씩 확인한다.
3. moves요소-1 번째 b의 배열이 비어있는 경우 건너띈다.
4. bucket이 비어있는 경우 moves요소-1번째 마지막 요소를 넣는다.
5. bucket이 비어있지 않는 경우 마지막 요소와 moves요소-1 번째 b의 배열 마지막요소와 비교한다.
6. 5에서 다른경우 bucket에 담는다.
7. 5에서 같은 경우 answer + 2를 하고, bucket 마지막 요소를 제거한다.

[소스 - JavaScript]
function solution(board, moves) {
  var answer = 0;
  var b      = [];
  var bucket = [];
	
  board.forEach((x, i) => {
    var temp = [];
	
    x.forEach((y, j) => {
      if(board[board.length-j-1][i] === 0) return false;
      temp.push(board[board.length-j-1][i]);
    });
		
    b.push(temp);
  });

  moves.forEach((x) => {
    if(b[x-1].length === 0) return false;
		
    var doll = b[x-1].pop();
		
    if(doll !== bucket[bucket.length-1]) bucket.push(doll);
    else {
      bucket.pop();
      answer += 2;
    }
  });
	
  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(int[][] board, int[] moves) {
    int answer            = 0;
    List<Stack> list      = new ArrayList<>();
    Stack<Integer> bucket = new Stack<>();
		
    for(int i=0; i<board.length; i++) {
      Stack<Integer> stack  = new Stack<>();
			
      for(int j=board[i].length-1; j>=0; j--) {
        if(board[j][i] == 0) continue;
				
        stack.add(board[j][i]);
      }
			
      list.add(stack);
    }
		
    for(int i=0; i<moves.length; i++) {
      if(list.get(moves[i]-1).size() == 0) continue;
			
      int doll = (int)list.get(moves[i]-1).pop();
			
      if(bucket.size() == 0 || doll != bucket.peek()) bucket.add(doll);
      else {
        bucket.pop();
        answer += 2;
      }
    }
		
    return answer;
  }
}
