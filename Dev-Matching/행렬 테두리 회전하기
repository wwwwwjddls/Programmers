https://programmers.co.kr/learn/courses/30/lessons/77485

[풀이]
1. rows*columns만큼 숫자로 채워진 배열을 만든다.(arr)
2. queries 요소를 하나씩 확인한다.
3. 회전하는 요소의 범위 중 테두리에 해당하지 않는 요소들을 확인한다(mis)
4. 회전하는 요소들에 대하여 회전 후 담길 요소들을 배열 tmp에 담는다.
5. tmp담긴 요소 중 최솟값을 answer에 담는다.
6. arr요소를 tmp요소로 변경한다.

[소스 - JavaScript]
function solution(rows, columns, queries) {
  var answer = [];
  var idx    = 0;
  var arr    = Array.from(Array(rows), (x,i)=> {
    var tmp = [];
    for(var j=0; j<columns; j++) tmp.push(++idx);
    return tmp;	
  });

  queries.forEach((a) => {
    var mis = Array.from(Array(a[3]-a[1]-1), (x,i) => a[3]-2-i);
    var tmp = [];
    for(var i=a[0]-1; i<=a[2]-1; i++) {
      for(var j=a[1]-1; j<=a[3]-1; j++) {
        if(i!==a[0]-1 && i!==a[2]-1 && mis.includes(j)) continue;
        if(i===a[0]-1) {
          (j===a[1]-1) ? tmp.push(arr[i+1][j]) : tmp.push(arr[i][j-1]);
        }
        else if(i===a[2]-1) {
          (j===a[3]-1) ? tmp.push(arr[i-1][j]) : tmp.push(arr[i][j+1]);
        }
        else {
          (j===a[3]-1) ? tmp.push(arr[i-1][j]) : tmp.push(arr[i+1][j]);
        }
      }
    }
	
    answer.push(Math.min.apply(null, tmp));
	
    for(var i=a[0]-1; i<=a[2]-1; i++) {
      for(var j=a[1]-1; j<=a[3]-1; j++) {
        if(i!==a[0]-1 && i!==a[2]-1 && mis.includes(j)) continue;
        arr[i][j] = tmp.shift();
      }
    }
  });
  
  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int[] solution(int rows, int columns, int[][] queries) {
    int[] answer = new int[queries.length];
    int[][] arr  = new int[rows][columns];
    int idx = 0;
    
    for(int i=0; i<rows; i++) {
      for(int j=0; j<columns; j++ ) {
        arr[i][j] = ++idx;
      }
    }

    for(int x=0; x<queries.length; x++) {
      int[] a            = queries[x];
      List<Integer> mis  = new ArrayList<>();
      Queue<Integer> tmp = new LinkedList<>();
      
      for(int i=0; i<a[3]-a[1]-1; i++) mis.add(a[3]-2-i);
      
      for(int i=a[0]-1; i<=a[2]-1; i++) {
        for(int j=a[1]-1; j<=a[3]-1; j++) {
          if(i!=a[0]-1 && i!=a[2]-1 && mis.contains(j)) continue;
          if(i==a[0]-1) {
            if(j==a[1]-1) tmp.add(arr[i+1][j]);
            else tmp.add(arr[i][j-1]);
          }
          else if(i==a[2]-1) {
            if(j==a[3]-1) tmp.add(arr[i-1][j]);
            else tmp.add(arr[i][j+1]);
          }
          else {
            if(j==a[3]-1) tmp.add(arr[i-1][j]);
            else tmp.add(arr[i+1][j]);
          }
        }
      }
      
      answer[x] = tmp.peek();
      
      for(int i=0; i<tmp.size(); i++) {
        int m = tmp.poll();
        if(m<answer[x]) answer[x] = m;
        tmp.add(m);
      }
      
      for(int i=a[0]-1; i<=a[2]-1; i++) {
        for(int j=a[1]-1; j<=a[3]-1; j++) {
          if(i!=a[0]-1 && i!=a[2]-1 && mis.contains(j)) continue;
          arr[i][j] = tmp.poll();
        }
      }
    }
    
    return answer;
  }
}
