https://programmers.co.kr/learn/courses/30/lessons/68645

[풀이]
1. 위, 아래, 옆으로 나우어 x, y 좌표를 계산한다.
2. 아래인 경우 : 범위를 벗어나거나, 아래 빈 칸(0)이 없는 경우 방향을 옆으로 바꾼다.
3. 옆인 경우 : 범위를 벗어나거나, 옆의 빈 칸(0)이 없는 경우 뱡향을 위로 바꾼다.
4. 위인 경우 : 위의 빈 칸(0)이 없는 경우 방향을 아래로 바꾼다.
5. 1부터 16까지 달팽이 배열에 담아준다.

[소스 - JavaScript]
function solution(numbers) {
  var answer = [];
  var snail  = Array.from(new Array(numbers), (x, i) => new Array(i+1).fill(0));
  var len    = snail.reduce((sum, a) => sum+a.length, 0);
	
  var x   = 0;
  var y   = 0;
  var dir = 'd'; 

  for(let i=1; i<=len; i++) {
    snail[x][y] = i;
		
    if(dir === 'd') {
      if(x < numbers-1 && snail[x+1].indexOf(0) >= 0) x += 1;
      else {
        dir = 'r';
        y  += 1;
      }
    } 
    else if(dir === 'r') {
      if(y < snail[x].length-1 && snail[x][y+1] == 0) y += 1; 
      else {
        dir = 'u';
        x  -= 1;
        y  -= 1;
      }
    }
    else {
      if(snail[x-1].indexOf(0) < 0) {
        dir = 'd';
        x  += 1;
      }
      else {
        x -= 1;
        y -= 1;	
      }		
    }
  }
	
  snail.forEach((a) => {
    a.forEach((b) => answer.push(b));
  });
	
  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int[] solution(int n) {
    int[] answer      = {};
    List<int[]> list  = new ArrayList<>();
		
    int len    = 0;
    int x      = 0;
    int y      = 0;
    String dir = "d";
		
    for(int i=1; i<=n; i++) {	
      int[] temp = new int[i];
      Arrays.fill(temp, 0);
      list.add(temp);
      len += i;
    }

    for(int i=1; i<=len; i++) {
      list.get(x)[y] = i;

      if("d".equals(dir)) {
        if(x < n-1 && list.get(x+1)[y] == 0) x += 1;
        else {
          dir = "r";
          y  += 1;
        }
      }
      else if("r".equals(dir)) {
        if(y < list.get(x).length-1 && list.get(x)[y+1] == 0) y += 1;
        else {
          dir = "u";
          x  -= 1;
          y  -= 1;
        }
      }
      else {
        if(list.get(x-1)[y-1] != 0) {
          dir = "d";
          x  += 1;
        } 
        else {
          x -= 1;
          y -= 1;
        }
      }
    }
		
    answer      = new int[len];
    int listLen = 0;

    for(int i=0; i<list.size(); i++) {
      System.arraycopy(list.get(i), 0, answer, listLen, list.get(i).length);
      listLen += list.get(i).length;
    }
    
    return answer;
  }
}
