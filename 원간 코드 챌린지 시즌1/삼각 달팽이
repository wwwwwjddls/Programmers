[문제 설명]
정수 n이 매개변수로 주어집니다. 
다음 그림과 같이 밑변의 길이와 높이가 n인 삼각형에서 맨 위 꼭짓점부터 반시계 방향으로 달팽이 채우기를 진행한 후,
첫 행부터 마지막 행까지 모두 순서대로 합친 새로운 배열을 return 하도록 solution 함수를 완성해주세요.

[제한 조건]
• n은 1 이상 1,000 이하입니다.

[입출력 예]
n / result
4 / [1,2,9,3,10,8,4,5,6,7]
5 / [1,2,12,3,13,11,4,14,15,10,5,6,7,8,9]
6 / [1,2,15,3,16,14,4,17,21,13,5,18,19,20,12,6,7,8,9,10,11]

[입출력 예 설명]
입출력 예 #1
문제 예시와 같습니다.
입출력 예 #2
문제 예시와 같습니다.
입출력 예 #3
문제 예시와 같습니다.

[풀이]
1. 위, 아래, 옆으로 나우어 x, y 좌표를 계산한다.
2. 아래인 경우 : 범위를 벗어나거나, 아래 빈 칸(0)이 없는 경우 방향을 옆으로 바꾼다.
3. 옆인 경우 : 범위를 벗어나거나, 옆의 빈 칸(0)이 없는 경우 뱡향을 위로 바꾼다.
4. 위인 경우 : 위의 빈 칸(0)이 없는 경우 방향을 아래로 바꾼다.
5. 1부터 16까지 달팽이 배열에 담아준다.

[소스 - JavaScript]
function solution(numbers) {
  var answer = [];
  var snail  = Array.from(new Array(numbers), (x, i) => new Array(i+1).fill(0));
  var len    = snail.reduce((sum, a) => sum+a.length, 0);
	
  var x   = 0;
  var y   = 0;
  var dir = 'd'; 

  for(let i=1; i<=len; i++) {
    snail[x][y] = i;
		
    if(dir === 'd') {
      if(x < numbers-1 && snail[x+1].indexOf(0) >= 0) x += 1;
      else {
        dir = 'r';
        y  += 1;
      }
    } 
    else if(dir === 'r') {
      if(y < snail[x].length-1 && snail[x][y+1] == 0) y += 1; 
      else {
        dir = 'u';
        x  -= 1;
        y  -= 1;
      }
    }
  else {
    if(snail[x-1].indexOf(0) < 0) {
      dir = 'd';
      x  += 1;
    }
    else {
      x -= 1;
      y -= 1;	
    }		
  }
}
	
	snail.forEach((a) => {
		a.forEach((b) => answer.push(b));
	});
	
	return answer;
}
