https://programmers.co.kr/learn/courses/30/lessons/68646

[풀이]
1. 확인하려는 숫자의 오른편에 보다 작은 수가 있는지 확인하여 있는 경우 저장.
2. 0번째의 경우 최소값으로 지정하고, 오른편에 작은 수가 있더라고 한 번의 작은 수가 터지는 기회를 사용할 수 있기 때문에 answer+1
3. 1번째 부터 최소값보다 작은 경우 왼편은 제외가 가능므로 오른편에 작은 수가 있더라도 answer+1. 최소값으로 지정한다.
4. 1번째 부터 최소값보다 큰 경우 오른편의 작은 수가 있는 경우 양쪽에 작은 수가 있기 때문에 불가능.
5. 1번째 부터 최소값보다 큰 경우 오른편의 작은 수가 없는 경우 한 번의 작은 수가 터지는 기회를 사용할 수 있기 때문에 answer+1

[소스 - JavaScript]
function solution(a) {
  var answer = 0;
  var map    = {};
  var min    = 0;

  for(let i=a.length-1; i>=0; i--) {
    if(i === a.length-1 || a[i] < min) min = a[i];
    else map[i] = min;
  }
	
  for(let i=0; i<a.length; i++) {
    if(i === 0 || a[i] < min) {
      answer += 1;
      min     = a[i];
    }
    else {
      if(!map.hasOwnProperty(i)) answer++; 
    }
  }
  
	return answer
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(int[] a) {
    int answer       = 0;
    int min          = 0;
    Set<Integer> set = new HashSet<>();
		
    for(int i=a.length-1; i>=0; i--) {
      if(i == a.length-1 || a[i] < min) min = a[i];
      else set.add(i);
    }
		
    for(int i=0; i<a.length; i++) {
      if(i == 0 || a[i] < min) {
        answer += 1;
        min     = a[i];
      }
      else {
        if(!set.contains(i)) answer++;
      }
    }
		
    return answer;
  }
}
