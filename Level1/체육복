https://programmers.co.kr/learn/courses/30/lessons/42862

[풀이]
1. 탐욕법과 동적계획법
2. reserve중, lost에 있는 학생의 경우 filter한다.
3. lost를 차례대로 확인한다.
4. lost의 학생의 전 번호와 뒷 번호를 확인하여 있는 경우 제외, 없는 경우 n-1을 한다.
5. n을 answer에 담는다.

[소스 - JavaScript]
function solution(n, lost, reserve) {
  var answer = 0;
  var lArr   = lost.filter((a) => !reserve.includes(a));
  var rArr   = reserve.filter((a) => !lost.includes(a));

  lArr.forEach((a) => {
    if(rArr.includes(a-1)) rArr.splice(rArr.indexOf(a-1), 1);
    else if(rArr.includes(a+1)) rArr.splice(rArr.indexOf(a+1), 1);
    else n--;
  }); 
	
  return answer = n;
}

[소스 - Java]
import java.util.*;
import java.util.stream.Collectors;

class Solution {
  public int solution(int n, int[] lost, int[] reserve) {
    int answer = 0;
		
    List<Integer> lArr = Arrays.stream(lost).boxed().collect(Collectors.toList());
    List<Integer> rArr = Arrays.stream(reserve).boxed().collect(Collectors.toList());

    for(int i=lArr.size()-1; i>=0; i--) {
      if(rArr.contains(lArr.get(i))) {
        rArr.remove(rArr.indexOf(lArr.get(i)));
        lArr.remove(i);
      }
    }
		
    for(int i=0; i<lArr.size(); i++) {
      if(rArr.contains(lArr.get(i)-1)) rArr.remove(rArr.indexOf(lArr.get(i)-1));
      else if(rArr.contains(lArr.get(i)+1)) rArr.remove(rArr.indexOf(lArr.get(i)+1));
      else n--;
    }
		
    return answer = n;
  }
}
