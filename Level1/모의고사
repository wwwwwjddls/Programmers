[문제 설명]
수포자는 수학을 포기한 사람의 준말입니다. 
수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.
1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...
1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 
가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

[제한 조건]
• 시험은 최대 10,000 문제로 구성되어있습니다.
• 문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
• 가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.

[입출력 예]
answers / return
[1,2,3,4,5] / [1]
[1,3,2,4,2] / [1,2,3]

[입출력 예 설명]
입출력 예 #1
수포자 1은 모든 문제를 맞혔습니다.
수포자 2는 모든 문제를 틀렸습니다.
수포자 3은 모든 문제를 틀렸습니다.
따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.
입출력 예 #2
모든 사람이 2문제씩을 맞췄습니다.

[풀이]
1. 찍는 방식에 대하여 배열로 정의한다.
2. 정답의 요소를 확인하여 1번, 2번, 3번 수포자의 정답 갯수를 구한다.
3. 정답 갯수 중 최고값을 구한다.
4. 최고값에 해당하는 경우 answer에 담는다.

[소스 - JavaScript]
function solution(answers) {
  var answer = [];
  var met    = [[1,2,3,4,5], [2,1,2,3,2,4,2,5], [3,3,1,1,2,2,4,4,5,5]];
  var [one, two, thr] = [0, 0, 0];
	
  answers.forEach((a, idx) => {
    if(a === met[0][idx%met[0].length]) one++;
    if(a === met[1][idx%met[1].length]) two++;
    if(a === met[2][idx%met[2].length]) thr++;
  });
	
  var max = Math.max(one, two, thr);
	
  if(max === one) answer.push(1);
  if(max === two) answer.push(2);
  if(max === thr) answer.push(3);
	
  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int[] solution(int[] answers) {
    int[] answer = {};
    List<Integer> list = new ArrayList<>();
    int[][] met  = {{1,2,3,4,5}, {2,1,2,3,2,4,2,5}, {3,3,1,1,2,2,4,4,5,5}};
		
    int one = 0, two = 0, thr = 0;
		
    for(int i=0; i<answers.length; i++) {
      if(answers[i] == met[0][i%met[0].length]) one++;
      if(answers[i] == met[1][i%met[1].length]) two++;
      if(answers[i] == met[2][i%met[2].length]) thr++;
    }
		
    int max = Math.max(Math.max(one, two), thr);
		
    if(max == one) list.add(1);
    if(max == two) list.add(2);
    if(max == thr) list.add(3);
		
    return answer = list.stream().mapToInt(i -> i).toArray();
  }
}
