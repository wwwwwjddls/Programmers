[문제 설명]
수많은 마라톤 선수들이 마라톤에 참여하였습니다. 
단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.
마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 
완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

[제한 사항]
• 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
• completion의 길이는 participant의 길이보다 1 작습니다.
• 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
• 참가자 중에는 동명이인이 있을 수 있습니다.

[입출력 예]
participant /	completion / return
["leo", "kiki", "eden"] /	["eden", "kiki"] / "leo"
["marina", "josipa", "nikola", "vinko", "filipa"] / ["josipa", "filipa", "marina", "nikola"] / "vinko"
["mislav", "stanko", "mislav", "ana] / ["stanko", "ana", "mislav"] / "mislav"

[입출력 예 설명]
예제 #1
"leo"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.
예제 #2
"vinko"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.
예제 #3
"mislav"는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.

[풀이]
1. { 참가자이름 : 명 수 }로 맵핑한다.
2. 완주자 명단을 차례대로 확인하여 참가자 명단의 이름과 일치할 경우 명 수에서 -1 해준다.
3. 명 수가 0이 아닌 참가자의 이름을 구한다.

[소스 - JavaScript]
function solution(participant, completion) {
  var answer = '';
  var map    = participant.reduce((a, b) => {
    a[b] = (a.hasOwnProperty(b)) ? a[b]+1 : 1; 
    return a;
  },{});
	
  completion.forEach((a) => map[a] = map[a]-1)
	
  Object.keys(map).some((a) => {
    if(map[a] !== 0) return answer = a;
  });
	
  return answer ;
}

[소스 - Java]
import java.util.*;

class Solution {
  public String solution(String[] participant, String[] completion) {
    String answer = "";
    Map<String, Integer> map = new HashMap<>();
		
    for(int i=0; i<participant.length; i++) {
      if(map.containsKey(participant[i])) map.replace(participant[i], map.get(participant[i])+1);
      else map.put(participant[i], 1); 
    }
		
    for(int i=0; i<completion.length; i++) {
      map.replace(completion[i], map.get(completion[i])-1);
    }
		
    for(String a : map.keySet()) {
      if(map.get(a) > 0) {
        answer = a;
        break;
      }
    }
		
    return answer;
  }
}
