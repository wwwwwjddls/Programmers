https://programmers.co.kr/learn/courses/30/lessons/49994

[풀이]
1. dirs 요소를 확인한다.
2. 배열 p_에 현재위치와 움직인위치를 저장한다.
3. 배열의 범위를 벗어나면 건너뛴다.
4. 요소가 U인 경우 P의 첫 번째요소에 1을 더하고, D인경우 1을 뺀다.
5. 요소가 R인 경우 P의 두 번재요소에 1을 더하고, L인경우 1을 뺀다.
6. P_의요소를 앞뒤로 번갈아 더한후 v에 없는 경우 v에 담는다.
7. v길이 나누기 2를 반환한다.

[소스 - JavaScript]
function solution(dirs) {
  var answer = 0; 
  var v      = [];
  var p      = [0,0];
  
  for(var i=0; i<dirs.length; i++) {
    var a = dirs[i];
    var p_ = [p.join(''), ''];
	
    if((a==='U' && p[0]===5) 
    || (a==='D' && p[0]===-5)
    || (a==='R' && p[1]===5)
    || (a==='L' && p[1]===-5)) continue;

    if(a==='U') p[0]++;
    if(a==='D') p[0]--;
    if(a==='R') p[1]++;
    if(a==='L') p[1]--;
	
    p_[1]  = p.join('');

    if(!v.includes(p_[0]+p_[1]) && !v.includes(p_[1]+p_[0])) {
      v.push(p_[0]+p_[1]);
      v.push(p_[1]+p_[0]);
    }
  }

  return answer = v.length/2;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(String dirs) {
    int answer     = 0;
    List<String> v = new ArrayList<>();
    int[] p        = {0,0};
	
    for(int i=0; i<dirs.length(); i++) {
      char a      = dirs.charAt(i);
      String[] p_ = {"",""};
      p_[0]       = ""+p[0]+p[1];

      if((a=='U' && p[0]==5)
      || (a=='D' && p[0]==-5)
      || (a=='R' && p[1]==5)
      || (a=='L' && p[1]==-5)) continue;

      if(a=='U') p[0] += 1;
      if(a=='D') p[0] -= 1;
      if(a=='R') p[1] += 1;
      if(a=='L') p[1] -= 1;
	  
      p_[1] = ""+p[0]+p[1];
	  
      if(!v.contains(""+p_[0]+p_[1]) && !v.contains(""+p_[1]+p_[0])) {
        v.add(""+p_[0]+p_[1]);
        v.add(""+p_[1]+p_[0]);
      }
    }

    return answer = v.size()/2;
  }
}
