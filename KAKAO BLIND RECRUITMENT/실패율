https://programmers.co.kr/learn/courses/30/lessons/42889

[풀이]
1. 1부터 N까지 요소를 확인한다.
2. stages에 요소의 갯수를 확인한다.
3. 갯수가 0인 경우 0을 아닌 경우 갯수를 사람 수로 나누어 실패율을 구한다.
4. 사람 수에 갯수를 빼준다.
5. 실패율이 같은 경우 요소 크기, 다른 경우 실패율로 정렬한다.

[소스 - JavaScript]
function solution(N, stages) {
  var answer = [];
  var arr    = Array.from(new Array(N), (x, i) => i+1);
  var cnt    = stages.length;
  var rate   = {};
	
  arr.forEach((a) => {
    var temp = stages.filter((b) => b === a).length;
    rate[a] = (temp === 0) ? 0 : temp/cnt;
		
    cnt -= temp;
  });

  return answer = arr.sort((a, b) => (rate[a] === rate[b]) ? a-b : rate[b]-rate[a]);
}

[소스 - Java]
import java.util.*;

class Solution {
  public int[] solution(int N, int[] stages) {
    int[] answer              = new int[N];
    int len                   = stages.length;
    int idx                   = 0;
    Map<Integer, Double> rate = new HashMap<>();
		
    Arrays.sort(stages);

    for(int i=1; i<=N; i++) {
      int cnt = 0;
			
      for(int j=idx; j<stages.length; j++) {
        if(i != stages[j]) {
          idx = j;
          break;
        } 
				
        cnt++;
      }
			
      rate.put(i,  (len == 0) ? 0 : (double)cnt/len);
      len -= cnt;
    }
		
    List<Integer> arr = new ArrayList<>(rate.keySet());
		
    Collections.sort(arr, new Comparator() {
      @Override
      public int compare(Object o1, Object o2) {
        double a = rate.get(o1);
        double b = rate.get(o2);
				
        return (a-b == 0.0) ? ((int)o1 < (int)o2) ? -1 : 1 : (a < b) ? 1 : -1;
      }
    });
	
    for(int i=0; i<arr.size(); i++) {
      answer[i] = arr.get(i);
    }
		
    return answer;
  }
}
