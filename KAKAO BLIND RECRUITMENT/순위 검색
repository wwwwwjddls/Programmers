https://programmers.co.kr/learn/courses/30/lessons/72412

[풀이]
1. info의 정보와 '-'로 만들 수 있는 모든경우의 수를 구한다.
2. 해당 경우에 해당하는 점수를 담는다.
3. 모든경우의 수에 대한 점수를 오름차순으로 정렬한다.
4. 조건의 점수보다 높거나 같은 경우를 구한다.

[소스 - JavaScript]
function solution(info, query) {
  var answer = []; 
  var info_  = {};
	
  info.forEach((a) => {
    info_ = makeInfo(a.split(' '), 0, [], [], info_);
  });

  Object.keys(info_).forEach((a) => {
    info_[a].sort((b,c) => b-c);
  });

  query.forEach((a) => {
    var query_ = a.replace(/ and/g, '').split(' ');
    var key    = query_[0]+query_[1]+query_[2]+query_[3];
    var score  = query_[4];
    var b      = info_[key];
    var s      = 0;
    var f      = (b==null) ? 0 : b.length;
	
    while(0<f-s) {
      var mid = parseInt((s+f)/2);
      if(b[mid]>=score) f = mid
      else s = mid+1;
    }
		
    if(b==null) answer.push(0);
    else answer.push(b.length-f)
  });
	
  return answer;
}

function makeInfo(info, idx, key, result, map) {
  if(key.length==info.length-1) {
    var k = key.join('');
    var v = Number(info[4]);
		
    if(map.hasOwnProperty(k)) map[k].push(v);
    else map[k] = [v];
		
    return;
  }
	
  for(var i=0; i<2; i++) {
    if(i==0) key.push(info[idx]);
    else key.push('-');
		
    makeInfo(info, idx+1, key, result, map);
		
    key.pop();
  }
	
  return map;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int[] solution(String[] info, String[] query) {
    int[] answer                   = {};
    Map<String, List<Integer>> map = new HashMap<>();
    List<Integer> temp             = new ArrayList<>();
		
    for(int i=0; i<info.length; i++) {
      map = makeInfo(info[i].split(" "), 0, new ArrayList(), new ArrayList(), map);
    }
		
    for(String key : map.keySet()) {
      Collections.sort(map.get(key));
    }
		
    for(int i=0; i<query.length; i++) {
      String[] query_ = query[i].replace(" and", "").split(" ");
      String key      = query_[0]+query_[1]+query_[2]+query_[3];
      int score       = Integer.parseInt(query_[4]);
      List<Integer> b = new ArrayList<>();
      int s           = 0;
      int f           = 0;
			
      if(map.containsKey(key)) {
        b = map.get(key);
        f = b.size();
      }

      while(0<f-s) {
        int mid = (s+f)/2;
          
        if(b.get(mid)>=score) f = mid;
        else s = mid+1;
      }
			
      if(b.size()==0) temp.add(0);
      else temp.add(b.size()-f);
    }
		
    return answer = temp.stream().mapToInt(i->i).toArray();
  }
    
  public  Map<String, List<Integer>> makeInfo(String[] info, int idx, List<String> key, List<String> result, Map<String, List<Integer>> map) {
    if(key.size()==info.length-1) {
      String k = String.join("", key);
      int    v = Integer.parseInt(info[4]);
			
      if(map.containsKey(k)) {
        List<Integer> temp = map.get(k);
        temp.add(v);
				
        map.replace(k, temp);
      }
      else {
        List<Integer> temp = new ArrayList<>();
        temp.add(v);
        map.put(k, temp);
      }
			
      return map;
    }
		
    for(int i=0; i<2; i++) {
      if(i==0) key.add(info[idx]);
      else key.add("-");
			
      makeInfo(info, idx+1, key,result, map);
			
      key.remove(key.size()-1);
    }
		
    return map;        
  }
}
