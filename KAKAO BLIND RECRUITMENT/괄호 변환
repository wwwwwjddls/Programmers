https://programmers.co.kr/learn/courses/30/lessons/60058

[풀이]
1. p를 배열로 바꾼다.
2. p의 갯수를 새어 (과 )의 갯수가 같으면 u에 담는다.
3. 나머지를 v에 담는다.
4. u가 옳바른 괄호인지 확인한다.
5. 옳바른 괄호인 경우 u를 문자열로 변경하여 r에 담는다.
6. v의 길이가 0인 경우 v에 대하여 작업을 반복하고, 0인 경우 r을 반환한다.
7. 돓바른 괄호가 아닌 경우 a에 (과 v를 상위 작업을 한 결과 값과 )를 더한다.
8. u의 처음과 마지막 괄호를 제거하고 뒤집어 a에 더한다.
9. 해당 문자열을 반환한다.

[소스 - JavaScript]
function solution(p) {
  var answer = '';
  return answer = conduct(p, '');
}

function conduct(p, r) {
  var p_ = p.split('');
  var u  = p_.splice(0, chkCount(p_));
  var v  = [...p_];

  if(chkBraket(u)) {
    r += u.join('');
    return (v.length==0) ? r : conduct(v.join(''), r);
  }
  else {
    var a = '(' + conduct(v.join(''), '') + ')';
    
    u.shift();
    u.pop();

    r += u.reduce((b, c) => {
      if(c=='(') return b+')';
      else return b+'(';
    }, a)
    
    return r;
  }
}

function chkCount(p) {
  var left  = 0;
  var right = 0;
  
  p.some((a,i) => {
    if(a=='(') left++;
    else right++;
    if(left==right) return true;
  });

  return (left+right);
}

function chkBraket(p) {
  var check = [];

  p.some((a) => {
    if(a=='(') check.push(a);
    else {
      if(check.length==0) return false;
      check.pop();
    }
  });

  return (check.length==0) ? true : false;
}

[소스 - Java]
import java.util.*;

class Solution {
  public String solution(String p) {
    String answer = "";
    return answer = conduct(p, "");
  }
    
  public String conduct(String p, String r) {
    if(p.length()==0) return "";
        
    String[] p_ = p.split("");
    int idx     = chkCount(p_);
        
    String[] u = new String[idx];
    String[] v = new String[p_.length-idx];
        
    System.arraycopy(p_, 0, u, 0, idx);
    System.arraycopy(p_, idx, v, 0, p_.length-idx);
        
    if(chkBraket(u)) {
      r += String.join("", u);
      return (v.length==0) ? r : conduct(String.join("", v), r);
    }
    else {
      String a = "(" + conduct(String.join("", v), "") + ")";
            
      for(int i=1; i<u.length-1; i++) {
        if("(".equals(u[i])) a += ")";
        else a += "(";
      }
            
      return r += a;
    }
  }
    
  public int chkCount(String[] p) {
    int left  = 0;
    int right = 0;
        
    for(int i=0; i<p.length; i++) {
      if("(".equals(p[i])) left++;
      else right++;
      if(left==right) break;
    }
        
    return (left+right);
  }
    
  public boolean chkBraket(String[] p) {
    Stack<String> chk = new Stack<>();
        
    for(int i=0; i<p.length; i++) {
      if("(".equals(p[i])) chk.push(p[i]);
      else {
        if(chk.size()==0) return false;
        chk.pop();
      }
    }
        
    return (chk.size()==0) ? true : false;
  }
}
