https://programmers.co.kr/learn/courses/30/lessons/72411

[풀이]
1. orders 요소별로 정렬을 하여 메뉴조합을 구한다.
2. 메뉴조합 중, course별로 갯 수가 가장 큰 수를 구한다.
3. course별로 갯 수의 최대값에 해당하는 경우 answer에 담는다.
4. 정렬한다.

[소스 - JavaScript]
function solution(orders, course) {
  var answer  = [];
  var map     = {};

  for(var i=0; i<course.length; i++) {
    var cnt     = course[i];
    var course_ = [];
    for(var j=0; j<orders.length; j++) {
      course_ = course_.concat(makeCourse(orders[j].split(''), cnt, 0, [], []));
    }
	
    for(var j=0; j<course_.length; j++) {
      if(map.hasOwnProperty(course_[j])) map[course_[j]] += 1;
      else map[course_[j]] = 1;
    }
  }
	
  var key = Object.keys(map).sort((a, b) => {
    return (a.length>b.length) ? 1 : (a.length==b.length) ? (map[a]<map[b]) ? 1 : -1 : -1
  });

  for(var i=0; i<course.length; i++) {
    var max = 0;
    for(j=0; j<key.length; j++) {
      if(course[i]!=key[j].length || map[key[j]]==1) continue;
      if(max==0||max==map[key[j]]) {
        answer.push(key[j]);
        max = map[key[j]];
      }
      else break;
     }
  }

  return answer = answer.sort((a, b) => (a<b) ? -1 : 1);
}

function makeCourse(order, cnt, idx, temp, result) {
  if(temp.length==cnt) {
    var a = [].concat(temp);
    var course = a.sort((a, b) => (a<b) ? -1 : 1).join('');
    result.push(course);
    return;
  }
	
  for(var i=idx; i<order.length; i++) {
    if(!temp.includes(order[i])) {
      temp.push(order[i]);
      makeCourse(order, cnt, i+1, temp, result);
      temp.pop();
    }
  }
	
  return result;
}

[소스 - Java]
import java.util.*;

class Solution {
  Map<String, Integer> list = new HashMap<>();

  public String[] solution(String[] orders, int[] course) {
    String[] answer      = {};
    List<String> answer_ = new ArrayList<>();
    Map<Integer, Integer> link = new HashMap<>();
		
    for(int i=0; i<orders.length; i++) {
      char[] order = orders[i].toCharArray(); 
      Arrays.sort(order);
			
      for(int j=0; j<course.length; j++) {
        getOrder(order, 0, course[j], "");
      }
    }
		
    for(String k : list.keySet()) {
      if(list.get(k)==1) continue;
      if(!link.containsKey(k.length())) link.put(k.length(), list.get(k));
      else if(link.get(k.length())<list.get(k)) link.replace(k.length(), list.get(k));
    }
 
    for(int len : link.keySet()) {
      for(String k : list.keySet()) {
        if(len==k.length() && link.get(len)==list.get(k)) answer_.add(k);
      }
    }
		
    answer_.sort(null);	
    return answer = answer_.toArray(new String[answer_.size()]);
  }
    
  public void getOrder(char[] order, int idx, int cnt, String result) {
    if(result.length()==cnt) {
      if(list.containsKey(result)) list.replace(result, list.get(result)+1);
      else list.put(result, 1);
      return;
    }
		
    for(int i=idx; i<order.length; i++) {
      getOrder(order, i+1, cnt, result+order[i]);
    }
  }
}
