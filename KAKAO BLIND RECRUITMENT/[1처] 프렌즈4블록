https://programmers.co.kr/learn/courses/30/lessons/17679

[풀이]
1. board를 시계방향으로 90도 돌린 배열을 만든다.(map)
2. f 를 false로 선언한다. f가 false로 지속되는 경우 while문을 멈춘다.
3. map의 요소를 확인한다. 오른쪽, 대각선 아래, 아래 요소가 같으면 v의 해당요소들을 true로 바꾸고 f도 true로 바꾼다.
4. v가 true인 경우를 제거한다.
5. v의 제거전 길이와 제거후 길이의 차이를 answer에 더한다.

[소스 - JavaScript]
function solution(m, n, board) {
  var answer = 0;
  var map    = Array.from(Array(n), (x,i) => new Array(m));

  for(var i=0; i<n; i++) {
    for(var j=0; j<m; j++) {
      map[i][j] = board[m-j-1][i];
    }
  }
   
  while(true) {
    var v = Array.from(Array(map.length), (x,i) => new Array(map[i].length).fill(false));
    var f = false;
	
    for(var i=0; i<map.length-1; i++) {
      for(var j=0; j<map[i].length-1; j++) {
        if(map[i][j]===map[i+1][j]
        && map[i][j]===map[i][j+1]
        && map[i][j]===map[i+1][j+1]) {
          v[i][j]     = true;
          v[i+1][j]   = true;
          v[i][j+1]   = true;
          v[i+1][j+1] = true;
          f           = true;		  
        }
      }
    }
	
    if(!f) break;
    
    for(var i=0; i<map.length; i++) {
      var len = map[i].length; 
      map[i]  = map[i].filter((a, j) => !v[i][j]);
      answer += (len-map[i].length);
    }	
  }

  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(int m, int n, String[] board) {
    int answer = 0;
    List<List<Character>> map = new ArrayList<>();
	
    for(int i=0; i<n; i++) {
      List<Character> tmp = new ArrayList<>();
      for(int j=0; j<m; j++) {
        tmp.add(board[m-j-1].charAt(i));
      }
      map.add(tmp);
    }
	
    while(true) {
      boolean f             = false;
      List<boolean[]> v = new ArrayList<>();
	  
      for(int i=0; i<map.size(); i++) {
        boolean[] tmp = new boolean[map.get(i).size()];
        for(int j=0; j<tmp.length; j++) tmp[j] = false;  
          v.add(tmp);
        }
	  
      for(int i=0; i<map.size()-1; i++) {
        for(int j=0; j<map.get(i).size()-1; j++) {
          if(map.get(i+1).size()<=j+1 || map.get(i).size()<=j+1) continue;
          if(map.get(i).get(j)==map.get(i+1).get(j)
          && map.get(i).get(j)==map.get(i).get(j+1)
          && map.get(i).get(j)==map.get(i+1).get(j+1)) {
            v.get(i)[j]     = true;
            v.get(i+1)[j]   = true;
            v.get(i)[j+1]   = true;
            v.get(i+1)[j+1] = true;
            f               = true;
          }
        }
      }

      if(!f) break;
	  
      for(int i=0; i<map.size(); i++) {
        int len = map.get(i).size();
        for(int j=len-1; j>=0; j--) if(v.get(i)[j]) map.get(i).remove(j);
        answer += len-map.get(i).size();
      }
    }
	
    return answer;
  }
}
