https://programmers.co.kr/learn/courses/30/lessons/42587

[풀이]
1. index와 priorities의 요소를 map에 답는다.
2. priorities를 정렬하여 최대값을 확인한다.
3. max와 priorities의 요소가 다른경우 map맨 끝으로 이동한다.
4. max와 priorities의 요소가 같으면 answer + 1을 한다.
5. max와 priorities의 요소가 같고, location과 priorities의 index가 다르면 priorities의 요소를 제거하고 최대값을 확인한다.
6. max와 priorities의 요소가 같고, location과 priorities의 index가 같으면 멈춘다.

[소스 - JavaScript]
function solution(priorities, location) {
  var answer = 0;
  var map    = priorities.map((a, idx) => a = [idx, a]);
	
  priorities.sort((a, b) => b-a);
	
  var max    = priorities.shift();

  while(map.length !== 0) {
    if(max !== map[0][1]) map.push(map.shift());
    else {
      answer++;
			
      if(map[0][0] === location) break;
			
      map.shift();
      max = priorities.shift();
    }
  }

  return answer;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(int[] priorities, int location) {
    int answer 		   = 0;
    int idx    		   = priorities.length-1;
    int[] list         = priorities.clone();
    Queue<Integer> que = new LinkedList<>();
		
    for(int i=0; i<priorities.length; i++) que.add(i);
		
    Arrays.sort(list);
		
    int max = list[idx];
	
    while(que.size() != 0) {
      int a = que.peek();
			
      if(max != priorities[a]) que.add(que.poll());
      else {
        answer++;
				
        if(a == location) break;
				
        que.poll();
        idx -= 1;
        max = list[idx];
      }
    }
		
    return answer;
  }
}
