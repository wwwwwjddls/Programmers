https://programmers.co.kr/learn/courses/30/lessons/42583

[풀이]
1. bridge_length 만큼 배열을 만들어 0을 담는다.(bridege)
2. truck_weights의 요소를 하나씩 확인한다.
3. answer에 1을 더한다.
4. bridege에서 앞의 요소를 제거한다.
5. bridege의 합계와 truck_weights 첫 번재 요소의 합이 weight 보다 작거나 같으면 첫 번재요소를 꺼내어 bridege에 담는다.
6. bridege의 합계와 truck_weights 첫 번재 요소의 합이 weight 보다 크면 0을 다믄ㄴ다.
7. truck_weights의 길이가 0일때까지 반복한다.
8. answer에 bridge_length을 더한다.

[소스 - JavaScript]
function solution(bridge_length, weight, truck_weights) {
  var answer  = 0;  
  var bridege = Array.from(Array(bridge_length)).fill(0);
  var sum     = (n) => n.reduce((a,b) => a+=b);

  while(truck_weights.length!=0) {
    answer++;
    bridege.shift();
	
    if(sum(bridege)+truck_weights[0]<=weight) bridege.push(truck_weights.shift());
    else bridege.push(0);
  }
  
  return answer + bridge_length;
}

[소스 - Java]
import java.util.*;

class Solution {
  public int solution(int bridge_length, int weight, int[] truck_weights) {
    int answer = 0;
    Queue<Integer> bridege = new LinkedList<>();
    Queue<Integer> truck   = new LinkedList<>();
    
    for(int i=0; i<bridge_length; i++) bridege.add(0);
    for(int i=0; i<truck_weights.length; i++) truck.add(truck_weights[i]);
    
    while(truck.size()!=0) {
      answer++;
      bridege.poll();
    	
      if(sum(bridege)+truck.peek()<=weight) bridege.add(truck.poll());
      else bridege.add(0);
    }
    
    return answer + bridge_length;
  }
    
  int sum(Queue<Integer> n) {
    int sum = 0;
    for(int a : n) sum += a;
    return sum;
  }
}
