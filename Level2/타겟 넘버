
[문제 설명]
n개의 음이 아닌 정수가 있습니다. 
이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 
숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

[제한 사항]
• 주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
• 각 숫자는 1 이상 50 이하인 자연수입니다.
• 타겟 넘버는 1 이상 1000 이하인 자연수입니다.

[입출력 예]
numbers / target / return
[1, 1, 1, 1, 1] / 3 / 5

[풀이]
1. numbers의 요소의 양수와 음수로 계산되는 모든 수의 경우의 수를 구한다.
2. numbers의 합이 target과 같으면 result에 담는다.
3. result의 길이를 반환한다.

[소스-JavaScript]
function solution(numbers, target) {
  var answer = 0;
  return answer = getSum(numbers, target, 0, 0, []);
}

function getSum(num, target, idx, sum, result) {
  if(num.length==idx) {
    if(sum==target) result.push(sum);
    return;
  }

  for(var i=0; i<2; i++) {
    sum = (i==0) ? sum+num[idx] : sum-num[idx];
    getSum(num, target, idx+1, sum, result);
		
    sum = (i==0) ? sum-num[idx] : sum+num[idx];
  }
	
  return result.length;
}

[소스-Java]
import java.util.*;

class Solution {
  public int solution(int[] numbers, int target) {
    int answer = 0;
    return answer = getSum(numbers, target, 0, 0, new ArrayList<>());
  }
    
  public int getSum(int[] num, int target, int idx, int sum, List<Integer> result) {
    if(num.length==idx) {
      if(sum==target) result.add(sum);
      return 0;
    }
		
    for(int i=0; i<2; i++) {
      sum = (i==0) ? sum+num[idx] : sum-num[idx];
      getSum(num, target, idx+1, sum, result);
      sum = (i==0) ? sum-num[idx] : sum+num[idx];
    }
		
    return result.size();        
  }
}
